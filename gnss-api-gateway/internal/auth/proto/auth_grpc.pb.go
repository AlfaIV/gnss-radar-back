// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AuthClient is the client API for Auth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthClient interface {
	CheckSession(ctx context.Context, in *SessionId, opts ...grpc.CallOption) (*Status, error)
	CreateSession(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*SessionId, error)
	DeleteSession(ctx context.Context, in *SessionId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetUserId(ctx context.Context, in *SessionId, opts ...grpc.CallOption) (*UserId, error)
}

type authClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthClient(cc grpc.ClientConnInterface) AuthClient {
	return &authClient{cc}
}

func (c *authClient) CheckSession(ctx context.Context, in *SessionId, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/Auth/CheckSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) CreateSession(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*SessionId, error) {
	out := new(SessionId)
	err := c.cc.Invoke(ctx, "/Auth/CreateSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) DeleteSession(ctx context.Context, in *SessionId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Auth/DeleteSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetUserId(ctx context.Context, in *SessionId, opts ...grpc.CallOption) (*UserId, error) {
	out := new(UserId)
	err := c.cc.Invoke(ctx, "/Auth/GetUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServer is the server API for Auth service.
// All implementations must embed UnimplementedAuthServer
// for forward compatibility
type AuthServer interface {
	CheckSession(context.Context, *SessionId) (*Status, error)
	CreateSession(context.Context, *UserId) (*SessionId, error)
	DeleteSession(context.Context, *SessionId) (*emptypb.Empty, error)
	GetUserId(context.Context, *SessionId) (*UserId, error)
	mustEmbedUnimplementedAuthServer()
}

// UnimplementedAuthServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServer struct {
}

func (*UnimplementedAuthServer) CheckSession(context.Context, *SessionId) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckSession not implemented")
}
func (*UnimplementedAuthServer) CreateSession(context.Context, *UserId) (*SessionId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (*UnimplementedAuthServer) DeleteSession(context.Context, *SessionId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSession not implemented")
}
func (*UnimplementedAuthServer) GetUserId(context.Context, *SessionId) (*UserId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserId not implemented")
}
func (*UnimplementedAuthServer) mustEmbedUnimplementedAuthServer() {}

func RegisterAuthServer(s *grpc.Server, srv AuthServer) {
	s.RegisterService(&_Auth_serviceDesc, srv)
}

func _Auth_CheckSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).CheckSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auth/CheckSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).CheckSession(ctx, req.(*SessionId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auth/CreateSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).CreateSession(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_DeleteSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).DeleteSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auth/DeleteSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).DeleteSession(ctx, req.(*SessionId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_GetUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auth/GetUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetUserId(ctx, req.(*SessionId))
	}
	return interceptor(ctx, in, info, handler)
}

var _Auth_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckSession",
			Handler:    _Auth_CheckSession_Handler,
		},
		{
			MethodName: "CreateSession",
			Handler:    _Auth_CreateSession_Handler,
		},
		{
			MethodName: "DeleteSession",
			Handler:    _Auth_DeleteSession_Handler,
		},
		{
			MethodName: "GetUserId",
			Handler:    _Auth_GetUserId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gnss-api-gateway/internal/auth/proto/auth.proto",
}
