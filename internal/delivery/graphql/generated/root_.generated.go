// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/Gokert/gnss-radar/internal/pkg/model"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		schema:     cfg.Schema,
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Schema     *ast.Schema
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	AuthorizationMutations() AuthorizationMutationsResolver
	Device() DeviceResolver
	GnssMutations() GnssMutationsResolver
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	AuthcheckOutput struct {
		UserInfo func(childComplexity int) int
	}

	AuthorizationMutations struct {
		Logout func(childComplexity int, input *model.LogoutInput) int
		Signin func(childComplexity int, input model.SigninInput) int
		Signup func(childComplexity int, input model.SignupInput) int
	}

	CoordsResults struct {
		X func(childComplexity int) int
		Y func(childComplexity int) int
		Z func(childComplexity int) int
	}

	CreateDeviceOutput struct {
		Device func(childComplexity int) int
	}

	CreateTaskOutput struct {
		Task func(childComplexity int) int
	}

	DeleteTaskOutput struct {
		Empty func(childComplexity int) int
	}

	Device struct {
		Coords      func(childComplexity int) int
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		Token       func(childComplexity int) int
	}

	DevicePagination struct {
		Items func(childComplexity int) int
	}

	GNSS struct {
		Coordinates   func(childComplexity int) int
		ID            func(childComplexity int) int
		SatelliteID   func(childComplexity int) int
		SatelliteName func(childComplexity int) int
	}

	GNSSPagination struct {
		Items func(childComplexity int) int
	}

	GnssMutations struct {
		CreateDevice func(childComplexity int, input model.UpdateDeviceInput) int
		CreateTask   func(childComplexity int, input model.CreateTaskInput) int
		DeleteTask   func(childComplexity int, input model.DeleteTaskInput) int
		UpdateDevice func(childComplexity int, input model.UpdateDeviceInput) int
		UpdateTask   func(childComplexity int, input model.UpdateTaskInput) int
	}

	Header struct {
		AntInfo            func(childComplexity int) int
		AntennaDeltaHen    func(childComplexity int) int
		ApproxPositionXyz  func(childComplexity int) int
		Comments           func(childComplexity int) int
		EndOfHeader        func(childComplexity int) int
		FileType           func(childComplexity int) int
		Interval           func(childComplexity int) int
		MarkerName         func(childComplexity int) int
		MarkerNumber       func(childComplexity int) int
		ObserverAgency     func(childComplexity int) int
		PgmRunByDate       func(childComplexity int) int
		RecInfo            func(childComplexity int) int
		RinexVersion       func(childComplexity int) int
		TimeOfFirstObs     func(childComplexity int) int
		TimeOfLastObs      func(childComplexity int) int
		TypesOfObs         func(childComplexity int) int
		WavelengthFactL1L2 func(childComplexity int) int
	}

	LogoutOutput struct {
		Empty func(childComplexity int) int
	}

	Mutation struct {
		Authorization func(childComplexity int) int
		Gnss          func(childComplexity int) int
	}

	Observation struct {
		EpochFlag  func(childComplexity int) int
		Satellites func(childComplexity int) int
		Time       func(childComplexity int) int
	}

	Query struct {
		Authcheck          func(childComplexity int, input *model.AuthcheckInput) int
		Errors             func(childComplexity int) int
		ListDevice         func(childComplexity int, filter model.DeviceFilter, page int, perPage int) int
		ListGnss           func(childComplexity int, filter model.GNSSFilter, page int, perPage int) int
		Rinexlist          func(childComplexity int, input *model.RinexInput, page int, perPage int) int
		__resolve__service func(childComplexity int) int
	}

	RinexPagination struct {
		Items func(childComplexity int) int
	}

	RinexResults struct {
		Header       func(childComplexity int) int
		Observations func(childComplexity int) int
	}

	Satellite struct {
		Observations func(childComplexity int) int
		SatelliteID  func(childComplexity int) int
	}

	SigninOutput struct {
		UserInfo func(childComplexity int) int
	}

	SignupOutput struct {
		UserInfo func(childComplexity int) int
	}

	Task struct {
		EndAt         func(childComplexity int) int
		GroupingType  func(childComplexity int) int
		ID            func(childComplexity int) int
		SatelliteID   func(childComplexity int) int
		SatelliteName func(childComplexity int) int
		SignalType    func(childComplexity int) int
		StartAt       func(childComplexity int) int
	}

	UpdateDeviceOutput struct {
		Device func(childComplexity int) int
	}

	UpdateTaskOutput struct {
		Task func(childComplexity int) int
	}

	User struct {
		ID    func(childComplexity int) int
		Login func(childComplexity int) int
		Role  func(childComplexity int) int
	}

	_Service struct {
		SDL func(childComplexity int) int
	}
}

type executableSchema struct {
	schema     *ast.Schema
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	if e.schema != nil {
		return e.schema
	}
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "AuthcheckOutput.userInfo":
		if e.complexity.AuthcheckOutput.UserInfo == nil {
			break
		}

		return e.complexity.AuthcheckOutput.UserInfo(childComplexity), true

	case "AuthorizationMutations.logout":
		if e.complexity.AuthorizationMutations.Logout == nil {
			break
		}

		args, err := ec.field_AuthorizationMutations_logout_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.AuthorizationMutations.Logout(childComplexity, args["input"].(*model.LogoutInput)), true

	case "AuthorizationMutations.signin":
		if e.complexity.AuthorizationMutations.Signin == nil {
			break
		}

		args, err := ec.field_AuthorizationMutations_signin_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.AuthorizationMutations.Signin(childComplexity, args["input"].(model.SigninInput)), true

	case "AuthorizationMutations.signup":
		if e.complexity.AuthorizationMutations.Signup == nil {
			break
		}

		args, err := ec.field_AuthorizationMutations_signup_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.AuthorizationMutations.Signup(childComplexity, args["input"].(model.SignupInput)), true

	case "CoordsResults.x":
		if e.complexity.CoordsResults.X == nil {
			break
		}

		return e.complexity.CoordsResults.X(childComplexity), true

	case "CoordsResults.y":
		if e.complexity.CoordsResults.Y == nil {
			break
		}

		return e.complexity.CoordsResults.Y(childComplexity), true

	case "CoordsResults.z":
		if e.complexity.CoordsResults.Z == nil {
			break
		}

		return e.complexity.CoordsResults.Z(childComplexity), true

	case "CreateDeviceOutput.device":
		if e.complexity.CreateDeviceOutput.Device == nil {
			break
		}

		return e.complexity.CreateDeviceOutput.Device(childComplexity), true

	case "CreateTaskOutput.task":
		if e.complexity.CreateTaskOutput.Task == nil {
			break
		}

		return e.complexity.CreateTaskOutput.Task(childComplexity), true

	case "DeleteTaskOutput._empty":
		if e.complexity.DeleteTaskOutput.Empty == nil {
			break
		}

		return e.complexity.DeleteTaskOutput.Empty(childComplexity), true

	case "Device.Coords":
		if e.complexity.Device.Coords == nil {
			break
		}

		return e.complexity.Device.Coords(childComplexity), true

	case "Device.description":
		if e.complexity.Device.Description == nil {
			break
		}

		return e.complexity.Device.Description(childComplexity), true

	case "Device.id":
		if e.complexity.Device.ID == nil {
			break
		}

		return e.complexity.Device.ID(childComplexity), true

	case "Device.name":
		if e.complexity.Device.Name == nil {
			break
		}

		return e.complexity.Device.Name(childComplexity), true

	case "Device.token":
		if e.complexity.Device.Token == nil {
			break
		}

		return e.complexity.Device.Token(childComplexity), true

	case "DevicePagination.items":
		if e.complexity.DevicePagination.Items == nil {
			break
		}

		return e.complexity.DevicePagination.Items(childComplexity), true

	case "GNSS.Coordinates":
		if e.complexity.GNSS.Coordinates == nil {
			break
		}

		return e.complexity.GNSS.Coordinates(childComplexity), true

	case "GNSS.Id":
		if e.complexity.GNSS.ID == nil {
			break
		}

		return e.complexity.GNSS.ID(childComplexity), true

	case "GNSS.SatelliteId":
		if e.complexity.GNSS.SatelliteID == nil {
			break
		}

		return e.complexity.GNSS.SatelliteID(childComplexity), true

	case "GNSS.SatelliteName":
		if e.complexity.GNSS.SatelliteName == nil {
			break
		}

		return e.complexity.GNSS.SatelliteName(childComplexity), true

	case "GNSSPagination.items":
		if e.complexity.GNSSPagination.Items == nil {
			break
		}

		return e.complexity.GNSSPagination.Items(childComplexity), true

	case "GnssMutations.createDevice":
		if e.complexity.GnssMutations.CreateDevice == nil {
			break
		}

		args, err := ec.field_GnssMutations_createDevice_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.GnssMutations.CreateDevice(childComplexity, args["input"].(model.UpdateDeviceInput)), true

	case "GnssMutations.createTask":
		if e.complexity.GnssMutations.CreateTask == nil {
			break
		}

		args, err := ec.field_GnssMutations_createTask_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.GnssMutations.CreateTask(childComplexity, args["input"].(model.CreateTaskInput)), true

	case "GnssMutations.deleteTask":
		if e.complexity.GnssMutations.DeleteTask == nil {
			break
		}

		args, err := ec.field_GnssMutations_deleteTask_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.GnssMutations.DeleteTask(childComplexity, args["input"].(model.DeleteTaskInput)), true

	case "GnssMutations.updateDevice":
		if e.complexity.GnssMutations.UpdateDevice == nil {
			break
		}

		args, err := ec.field_GnssMutations_updateDevice_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.GnssMutations.UpdateDevice(childComplexity, args["input"].(model.UpdateDeviceInput)), true

	case "GnssMutations.updateTask":
		if e.complexity.GnssMutations.UpdateTask == nil {
			break
		}

		args, err := ec.field_GnssMutations_updateTask_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.GnssMutations.UpdateTask(childComplexity, args["input"].(model.UpdateTaskInput)), true

	case "Header.ant_info":
		if e.complexity.Header.AntInfo == nil {
			break
		}

		return e.complexity.Header.AntInfo(childComplexity), true

	case "Header.antenna_delta_hen":
		if e.complexity.Header.AntennaDeltaHen == nil {
			break
		}

		return e.complexity.Header.AntennaDeltaHen(childComplexity), true

	case "Header.approx_position_xyz":
		if e.complexity.Header.ApproxPositionXyz == nil {
			break
		}

		return e.complexity.Header.ApproxPositionXyz(childComplexity), true

	case "Header.comments":
		if e.complexity.Header.Comments == nil {
			break
		}

		return e.complexity.Header.Comments(childComplexity), true

	case "Header.end_of_header":
		if e.complexity.Header.EndOfHeader == nil {
			break
		}

		return e.complexity.Header.EndOfHeader(childComplexity), true

	case "Header.file_type":
		if e.complexity.Header.FileType == nil {
			break
		}

		return e.complexity.Header.FileType(childComplexity), true

	case "Header.interval":
		if e.complexity.Header.Interval == nil {
			break
		}

		return e.complexity.Header.Interval(childComplexity), true

	case "Header.marker_name":
		if e.complexity.Header.MarkerName == nil {
			break
		}

		return e.complexity.Header.MarkerName(childComplexity), true

	case "Header.marker_number":
		if e.complexity.Header.MarkerNumber == nil {
			break
		}

		return e.complexity.Header.MarkerNumber(childComplexity), true

	case "Header.observer_agency":
		if e.complexity.Header.ObserverAgency == nil {
			break
		}

		return e.complexity.Header.ObserverAgency(childComplexity), true

	case "Header.pgm_run_by_date":
		if e.complexity.Header.PgmRunByDate == nil {
			break
		}

		return e.complexity.Header.PgmRunByDate(childComplexity), true

	case "Header.rec_info":
		if e.complexity.Header.RecInfo == nil {
			break
		}

		return e.complexity.Header.RecInfo(childComplexity), true

	case "Header.rinex_version":
		if e.complexity.Header.RinexVersion == nil {
			break
		}

		return e.complexity.Header.RinexVersion(childComplexity), true

	case "Header.time_of_first_obs":
		if e.complexity.Header.TimeOfFirstObs == nil {
			break
		}

		return e.complexity.Header.TimeOfFirstObs(childComplexity), true

	case "Header.time_of_last_obs":
		if e.complexity.Header.TimeOfLastObs == nil {
			break
		}

		return e.complexity.Header.TimeOfLastObs(childComplexity), true

	case "Header.types_of_obs":
		if e.complexity.Header.TypesOfObs == nil {
			break
		}

		return e.complexity.Header.TypesOfObs(childComplexity), true

	case "Header.wavelength_fact_l1_l2":
		if e.complexity.Header.WavelengthFactL1L2 == nil {
			break
		}

		return e.complexity.Header.WavelengthFactL1L2(childComplexity), true

	case "LogoutOutput._empty":
		if e.complexity.LogoutOutput.Empty == nil {
			break
		}

		return e.complexity.LogoutOutput.Empty(childComplexity), true

	case "Mutation.authorization":
		if e.complexity.Mutation.Authorization == nil {
			break
		}

		return e.complexity.Mutation.Authorization(childComplexity), true

	case "Mutation.gnss":
		if e.complexity.Mutation.Gnss == nil {
			break
		}

		return e.complexity.Mutation.Gnss(childComplexity), true

	case "Observation.epoch_flag":
		if e.complexity.Observation.EpochFlag == nil {
			break
		}

		return e.complexity.Observation.EpochFlag(childComplexity), true

	case "Observation.satellites":
		if e.complexity.Observation.Satellites == nil {
			break
		}

		return e.complexity.Observation.Satellites(childComplexity), true

	case "Observation.time":
		if e.complexity.Observation.Time == nil {
			break
		}

		return e.complexity.Observation.Time(childComplexity), true

	case "Query.authcheck":
		if e.complexity.Query.Authcheck == nil {
			break
		}

		args, err := ec.field_Query_authcheck_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Authcheck(childComplexity, args["input"].(*model.AuthcheckInput)), true

	case "Query.errors":
		if e.complexity.Query.Errors == nil {
			break
		}

		return e.complexity.Query.Errors(childComplexity), true

	case "Query.listDevice":
		if e.complexity.Query.ListDevice == nil {
			break
		}

		args, err := ec.field_Query_listDevice_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListDevice(childComplexity, args["filter"].(model.DeviceFilter), args["page"].(int), args["perPage"].(int)), true

	case "Query.listGnss":
		if e.complexity.Query.ListGnss == nil {
			break
		}

		args, err := ec.field_Query_listGnss_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListGnss(childComplexity, args["filter"].(model.GNSSFilter), args["page"].(int), args["perPage"].(int)), true

	case "Query.Rinexlist":
		if e.complexity.Query.Rinexlist == nil {
			break
		}

		args, err := ec.field_Query_Rinexlist_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Rinexlist(childComplexity, args["input"].(*model.RinexInput), args["page"].(int), args["perPage"].(int)), true

	case "Query._service":
		if e.complexity.Query.__resolve__service == nil {
			break
		}

		return e.complexity.Query.__resolve__service(childComplexity), true

	case "RinexPagination.items":
		if e.complexity.RinexPagination.Items == nil {
			break
		}

		return e.complexity.RinexPagination.Items(childComplexity), true

	case "RinexResults.header":
		if e.complexity.RinexResults.Header == nil {
			break
		}

		return e.complexity.RinexResults.Header(childComplexity), true

	case "RinexResults.observations":
		if e.complexity.RinexResults.Observations == nil {
			break
		}

		return e.complexity.RinexResults.Observations(childComplexity), true

	case "Satellite.observations":
		if e.complexity.Satellite.Observations == nil {
			break
		}

		return e.complexity.Satellite.Observations(childComplexity), true

	case "Satellite.satellite_id":
		if e.complexity.Satellite.SatelliteID == nil {
			break
		}

		return e.complexity.Satellite.SatelliteID(childComplexity), true

	case "SigninOutput.userInfo":
		if e.complexity.SigninOutput.UserInfo == nil {
			break
		}

		return e.complexity.SigninOutput.UserInfo(childComplexity), true

	case "SignupOutput.userInfo":
		if e.complexity.SignupOutput.UserInfo == nil {
			break
		}

		return e.complexity.SignupOutput.UserInfo(childComplexity), true

	case "Task.endAt":
		if e.complexity.Task.EndAt == nil {
			break
		}

		return e.complexity.Task.EndAt(childComplexity), true

	case "Task.groupingType":
		if e.complexity.Task.GroupingType == nil {
			break
		}

		return e.complexity.Task.GroupingType(childComplexity), true

	case "Task.id":
		if e.complexity.Task.ID == nil {
			break
		}

		return e.complexity.Task.ID(childComplexity), true

	case "Task.satelliteId":
		if e.complexity.Task.SatelliteID == nil {
			break
		}

		return e.complexity.Task.SatelliteID(childComplexity), true

	case "Task.satelliteName":
		if e.complexity.Task.SatelliteName == nil {
			break
		}

		return e.complexity.Task.SatelliteName(childComplexity), true

	case "Task.signalType":
		if e.complexity.Task.SignalType == nil {
			break
		}

		return e.complexity.Task.SignalType(childComplexity), true

	case "Task.startAt":
		if e.complexity.Task.StartAt == nil {
			break
		}

		return e.complexity.Task.StartAt(childComplexity), true

	case "UpdateDeviceOutput.device":
		if e.complexity.UpdateDeviceOutput.Device == nil {
			break
		}

		return e.complexity.UpdateDeviceOutput.Device(childComplexity), true

	case "UpdateTaskOutput.task":
		if e.complexity.UpdateTaskOutput.Task == nil {
			break
		}

		return e.complexity.UpdateTaskOutput.Task(childComplexity), true

	case "User.id":
		if e.complexity.User.ID == nil {
			break
		}

		return e.complexity.User.ID(childComplexity), true

	case "User.login":
		if e.complexity.User.Login == nil {
			break
		}

		return e.complexity.User.Login(childComplexity), true

	case "User.role":
		if e.complexity.User.Role == nil {
			break
		}

		return e.complexity.User.Role(childComplexity), true

	case "_Service.sdl":
		if e.complexity._Service.SDL == nil {
			break
		}

		return e.complexity._Service.SDL(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputAuthcheckInput,
		ec.unmarshalInputCoordsInput,
		ec.unmarshalInputCreateDeviceInput,
		ec.unmarshalInputCreateTaskInput,
		ec.unmarshalInputDeleteTaskInput,
		ec.unmarshalInputDeviceFilter,
		ec.unmarshalInputGNSSFilter,
		ec.unmarshalInputLogoutInput,
		ec.unmarshalInputRinexInput,
		ec.unmarshalInputSigninInput,
		ec.unmarshalInputSignupInput,
		ec.unmarshalInputUpdateDeviceInput,
		ec.unmarshalInputUpdateTaskInput,
	)
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, rc.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(ec.Schema()), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(ec.Schema(), ec.Schema().Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../../../../api/graphql/directives/goField.graphql", Input: `"""
GraphQL converter
"""
directive @goField(forceResolver: Boolean, name: String) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION`, BuiltIn: false},
	{Name: "../../../../api/graphql/directives/goModel.graphql", Input: `directive @goModel(model: String, models: [String!]) on OBJECT | UNION | INPUT_OBJECT | ENUM | INTERFACE | SCALAR
`, BuiltIn: false},
	{Name: "../../../../api/graphql/enums/devices.graphql", Input: `enum GroupingType {
    """ Неизвестно """
    GROUPING_TYPE_UNKNOWN
    """ GPS """
    GROUPING_TYPE_GPS
    """ Glonass """
    GROUPING_TYPE_GLONASS
    """ Galileo """
    GROUPING_TYPE_GALILEO
    """ Beidou """
    GROUPING_TYPE_BEIDOU
}

enum SignalType {
    """ Неизвестно """
    SIGNAL_TYPE_UNKNOWN
    """ L1 """
    SIGNAL_TYPE_L1
    """ L2 """
    SIGNAL_TYPE_L2
    """ L3 """
    SIGNAL_TYPE_L3
}`, BuiltIn: false},
	{Name: "../../../../api/graphql/enums/enums.graphql", Input: `scalar Empty

scalar Time`, BuiltIn: false},
	{Name: "../../../../api/graphql/enums/errors.graphql", Input: `""" Бизнес ошибки """
enum Error {
    """ Уже cуществует """
    ALREADY_EXISTS
    """ Не авторизован """
    NOT_AUTHORIZED
    """ Не найден"""
    NOT_FOUND
    """ Нет прав """
    PERMISSION_DENIED
    """ Ошибка сервера """
    INTERNAL_ERROR
    """ Ошибка запроса """
    BAD_REQUEST
}`, BuiltIn: false},
	{Name: "../../../../api/graphql/mutation/authorization.graphql", Input: `extend type Mutation {
    """ Мутации связанные с авторизацией """
    authorization: AuthorizationMutations!
}

""" Мутации связанные с авторизацией """
type AuthorizationMutations {
    """ Регистрация """
    signup(input: SignupInput!): SignupOutput! @goField(forceResolver: true)
    """ Авторизация """
    signin(input: SigninInput!): SigninOutput! @goField(forceResolver: true)
    """ Выход """
    logout(input: LogoutInput): LogoutOutput @goField(forceResolver: true)
}

""" Входные параметры для регистрации"""
input SignupInput {
    login: String!
    password: String!
}

""" Выходные параметры для регистрации """
type SignupOutput {
    """ Информация о юзере """
    userInfo: User!
}

""" Входные параметры для авторизации"""
input SigninInput {
    login: String!
    password: String!
}

""" Выходные параметры для авторизации """
type SigninOutput {
    """ Информация о юзере """
    userInfo: User!
}

""" Выходные параметры для выхода """
input LogoutInput {
    """ Пусто """
    _empty: Empty
}

""" Выходные параметры для выхода """
type LogoutOutput {
    """ Пусто """
    _empty: Empty
}
`, BuiltIn: false},
	{Name: "../../../../api/graphql/mutation/gnss.graphql", Input: `extend type Mutation {
    """ Мутации связанные с gnss """
    gnss: GnssMutations!
}

""" Мутации связанные с gnss """
type GnssMutations {
    """ Обновить device """
    updateDevice(input: UpdateDeviceInput!): UpdateDeviceOutput! @goField(forceResolver: true)
    """ Создать device """
    createDevice(input: UpdateDeviceInput!): CreateDeviceOutput! @goField(forceResolver: true)
    """ Создать task """
    createTask(input: CreateTaskInput!): CreateTaskOutput! @goField(forceResolver: true)
    """ Обновить task """
    updateTask(input: UpdateTaskInput!): UpdateTaskOutput! @goField(forceResolver: true)
    """ Удалить task """
    deleteTask(input: DeleteTaskInput!): DeleteTaskOutput! @goField(forceResolver: true)
}

""" Входные параметры для update device """
input UpdateDeviceInput {
    """ Индетификатор """
    Id: String!
    """ Название девайса """
    Name: String!
    """ Токен """
    Token: String!
    """ Описание """
    Description: String
    """ Координаты """
    Coords: CoordsInput!
}

""" Входные параметры для create device """
input CreateDeviceInput {
    """ Название девайса """
    Name: String!
    """ Токен """
    Token: String!
    """ Описание """
    Description: String
    """ Координаты """
    Coords: CoordsInput!
}

""" Выходные параметры для update device """
type UpdateDeviceOutput {
    device: Device!
}

""" Выходные параметры для create device """
type CreateDeviceOutput {
    device: Device!
}

""" Входные параметры для create task """
input CreateTaskInput {
    """ Id спутника """
    satelliteId: String!
    """ Имя спутника """
    satelliteName: String!
    """ Тип сигнала """
    signalType: SignalType!
    """ Тип группировки """
    groupingType: GroupingType!
    """ Время начала """
    startAt: Time!
    """ Время конца """
    endAt: Time!
}

""" Выходные параметры для create task """
type CreateTaskOutput {
    task: Task
}

""" Входные параметры для update task """
input UpdateTaskInput {
    """ Индетификатор """
    id: String!
    """ Id спутника """
    satelliteId: String!
    """ Имя спутника """
    satelliteName: String!
    """ Тип сигнала """
    signalType: SignalType!
    """ Тип группировки """
    groupingType: GroupingType!
    """ Время начала """
    startAt: Time!
    """ Время конца """
    endAt: Time!
}

""" Выходные параметры для update task """
type UpdateTaskOutput {
    task: Task
}

""" Входные параметры для delete task """
type DeleteTaskOutput {
    """ Пусто """
    _empty: Empty
}

""" Входные параметры для delete task """
input DeleteTaskInput {
    """ Индетификатор """
    id: String!
}`, BuiltIn: false},
	{Name: "../../../../api/graphql/query/authorization.graphql", Input: `extend type Query {
    """ Проверка авторизации """
    authcheck(input: AuthcheckInput): AuthcheckOutput
}

""" Выходные параметры для проверки авторизации """
input AuthcheckInput {
    """ Пусто """
    _empty: Empty
}

""" Выходные параметры для проверки авторизации """
type AuthcheckOutput {
    """ Информация о юзере """
    userInfo: User!
}`, BuiltIn: false},
	{Name: "../../../../api/graphql/query/gnss.graphql", Input: `extend type Query {
    """ Получить список GNSS """
    listGnss(filter: GNSSFilter!, page: Int! = 1, perPage: Int! = 10): GNSSPagination!
    """ Получить список Device """
    listDevice(filter: DeviceFilter!, page: Int! = 1, perPage: Int! = 10): DevicePagination!
    """ Получить список Rinex """
    Rinexlist(input: RinexInput, , page: Int! = 1, perPage: Int! = 10): RinexPagination!
}

input RinexInput {
    """ Пусто """
    _empty: Empty
}

type RinexPagination {
    items: [RinexResults!]
}

input GNSSFilter {
    """ Фильтр по индетификаторам """
    Coordinates: CoordsInput!
}

type GNSSPagination {
    """ Загруженные элементы """
    items: [GNSS!]
}

input DeviceFilter {
    """ Индетификатор """
    Ids: [String!]
    """ Название девайса """
    Names: [String!]
    """ Токен """
    Tokens: [String!]
}

type DevicePagination {
    """ Загруженные элементы """
    items: [Device!]
}

input CoordsInput {
    """ Координата X """
    x: String!
    """ Координата Y """
    y: String!
    """ Координата Z """
    z: String!
}`, BuiltIn: false},
	{Name: "../../../../api/graphql/schema/schema.graphql", Input: `### *** Schema *** ###

schema {
    query: Query
    mutation: Mutation
}

extend schema @link(
    url: "https://specs.apollo.dev/federation/v2.3",
    import: ["@external", "@requires", "@provides", "@key", "@shareable", "@inaccessible", "@tag", "@override", "@composeDirective", "@extends"]
)

### *** Queries *** ###

type Query

### *** Mutations *** ###

type Mutation
`, BuiltIn: false},
	{Name: "../../../../api/graphql/types/device.graphql", Input: `""" Девайс """
type Device {
    """ Индетификатор """
    id: String!
    """ Название девайса """
    name: String!
    """ Токен """
    token: String!
    """ Описание """
    description: String
    """ Координаты """
    Coords: CoordsResults!
}`, BuiltIn: false},
	{Name: "../../../../api/graphql/types/errors.graphql", Input: `extend type Query {
    """ Словарь ошибок """
    errors: [Error]!
}`, BuiltIn: false},
	{Name: "../../../../api/graphql/types/gnss.graphql", Input: `type GNSS {
    """ Индентификатор """
    Id: String!
    """ id спутника """
    SatelliteId: String!
    """ Имя спутника """
    SatelliteName: String!
    """ Координаты спутника """
    Coordinates: CoordsResults!
}

type CoordsResults {
    """ Координата X """
    x: String!
    """ Координата Y """
    y: String!
    """ Координата Z """
    z: String!
}


type Header {
    rinex_version: String!
    file_type: String!
    pgm_run_by_date: String!
    comments: [String!]!
    marker_name: String!
    marker_number: String!
    observer_agency: String!
    rec_info: String!
    ant_info: String!
    approx_position_xyz: [Float!]!
    antenna_delta_hen: [Float!]!
    wavelength_fact_l1_l2: [Int!]!
    types_of_obs: [String!]!
    interval: Float!
    time_of_first_obs: String!
    time_of_last_obs: String!
    end_of_header: Boolean!
}

type Satellite {
    satellite_id: String!
    observations: [String!]!
}

type Observation {
    time: String!
    epoch_flag: Int!
    satellites: [Satellite!]!
}

type RinexResults {
    header: Header!
    observations: [Observation!]!
}`, BuiltIn: false},
	{Name: "../../../../api/graphql/types/tasks.graphql", Input: `type Task {
    """ Индетификатор """
    id: String!
    """ Id спутника """
    satelliteId: String!
    """ Имя спутника """
    satelliteName: String!
    """ Тип сигнала """
    signalType: SignalType!
    """ Тип группировки """
    groupingType: GroupingType!
    """ Время начала """
    startAt: Time!
    """ Время конца """
    endAt: Time!
}`, BuiltIn: false},
	{Name: "../../../../api/graphql/types/user.graphql", Input: `""" Информация о юзере """
type User {
    id: String!
    login: String!
    role: String!
}`, BuiltIn: false},
	{Name: "../../../../federation/directives.graphql", Input: `
	directive @authenticated on FIELD_DEFINITION | OBJECT | INTERFACE | SCALAR | ENUM
	directive @composeDirective(name: String!) repeatable on SCHEMA
	directive @extends on OBJECT | INTERFACE
	directive @external on OBJECT | FIELD_DEFINITION
	directive @key(fields: FieldSet!, resolvable: Boolean = true) repeatable on OBJECT | INTERFACE
	directive @inaccessible on
	  | ARGUMENT_DEFINITION
	  | ENUM
	  | ENUM_VALUE
	  | FIELD_DEFINITION
	  | INPUT_FIELD_DEFINITION
	  | INPUT_OBJECT
	  | INTERFACE
	  | OBJECT
	  | SCALAR
	  | UNION
	directive @interfaceObject on OBJECT
	directive @link(import: [String!], url: String!) repeatable on SCHEMA
	directive @override(from: String!, label: String) on FIELD_DEFINITION
	directive @policy(policies: [[federation__Policy!]!]!) on 
	  | FIELD_DEFINITION
	  | OBJECT
	  | INTERFACE
	  | SCALAR
	  | ENUM
	directive @provides(fields: FieldSet!) on FIELD_DEFINITION
	directive @requires(fields: FieldSet!) on FIELD_DEFINITION
	directive @requiresScopes(scopes: [[federation__Scope!]!]!) on 
	  | FIELD_DEFINITION
	  | OBJECT
	  | INTERFACE
	  | SCALAR
	  | ENUM
	directive @shareable repeatable on FIELD_DEFINITION | OBJECT
	directive @tag(name: String!) repeatable on
	  | ARGUMENT_DEFINITION
	  | ENUM
	  | ENUM_VALUE
	  | FIELD_DEFINITION
	  | INPUT_FIELD_DEFINITION
	  | INPUT_OBJECT
	  | INTERFACE
	  | OBJECT
	  | SCALAR
	  | UNION
	scalar _Any
	scalar FieldSet
	scalar federation__Policy
	scalar federation__Scope
`, BuiltIn: true},
	{Name: "../../../../federation/entity.graphql", Input: `
type _Service {
  sdl: String
}

extend type Query {
  _service: _Service!
}
`, BuiltIn: true},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)
