package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"

	"github.com/Gokert/gnss-radar/internal/pkg/model"
	"github.com/Gokert/gnss-radar/internal/pkg/utils"
	"github.com/Gokert/gnss-radar/internal/service"
)

// Listgnss is the resolver for the listgnss field.
func (r *queryResolver) Listgnss(ctx context.Context, filter model.GNSSFilter) (*model.GNSSPagination, error) {
	if filter.Coordinates == nil {
		return nil, nil
	}

	gnssList, err := r.gnssSevice.ListGnss(ctx, service.ListRequest{X: filter.Coordinates.X, Y: filter.Coordinates.Y, Z: filter.Coordinates.Z})
	if err != nil {
		return nil, fmt.Errorf("gnssSevice.ListGnss: %w", err)
	}

	return &model.GNSSPagination{
		Items: utils.SerializerGnssCoords(gnssList),
	}, nil
}

// Rinexlist is the resolver for the rinexlist field.
func (r *queryResolver) Rinexlist(ctx context.Context, input *model.RinexInput) (*model.RinexPagination, error) {
	panic(fmt.Errorf("not implemented: Rinexlist - rinexlist"))
}
